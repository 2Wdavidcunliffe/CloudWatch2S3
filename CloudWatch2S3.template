{
    "Conditions": {
        "AllowedAccountsSpecified": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Fn::Join": [
                                ",",
                                {
                                    "Ref": "AllowedAccounts"
                                }
                            ]
                        },
                        "0"
                    ]
                }
            ]
        },
        "CreateBucket": {
            "Fn::Equals": [
                {
                    "Ref": "BucketName"
                },
                ""
            ]
        },
        "Encrypt": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "KeyArn"
                        },
                        ""
                    ]
                }
            ]
        },
        "ProcessingRequired": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "LogFormat"
                        },
                        "CloudWatch JSON (GZIP)"
                    ]
                }
            ]
        }
    },
    "Description": "Continuously dump all matching CloudWatch Log groups to a bucket for long-term storage (by CloudSnorkel)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Storage"
                    },
                    "Parameters": [
                        "BucketName",
                        "BucketPrefix",
                        "LogFormat"
                    ]
                },
                {
                    "Label": {
                        "default": "Other"
                    },
                    "Parameters": [
                        "DestinationName"
                    ]
                },
                {
                    "Label": {
                        "default": "Security"
                    },
                    "Parameters": [
                        "AllowedAccounts",
                        "KeyArn"
                    ]
                },
                {
                    "Label": {
                        "default": "Tweaks"
                    },
                    "Parameters": [
                        "ShardCount",
                        "Retention",
                        "BufferIntervalHint",
                        "BufferSizeHint",
                        "ProcessorBufferIntervalHint",
                        "ProcessorBufferSizeHint"
                    ]
                },
                {
                    "Label": {
                        "default": "CloudWatch Logs"
                    },
                    "Parameters": [
                        "SubscribeSchedule",
                        "LogGroupNamePrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "AllowedAccounts": {
                    "default": "Allowed Accounts"
                },
                "BucketName": {
                    "default": "Bucket ARN"
                },
                "BucketPrefix": {
                    "default": "Key Prefix"
                },
                "BufferIntervalHint": {
                    "default": "Delivery Buffer Timeout"
                },
                "BufferSizeHint": {
                    "default": "Delivery Buffer Size"
                },
                "DestinationName": {
                    "default": "Log Destination Name"
                },
                "KeyArn": {
                    "default": "KMS Key ARN"
                },
                "LogFormat": {
                    "default": "Export Format"
                },
                "LogGroupNamePrefix": {
                    "default": "Required Log Group Name Prefix"
                },
                "ProcessorBufferIntervalHint": {
                    "default": "Processing Lambda Buffer Timeout"
                },
                "ProcessorBufferSizeHint": {
                    "default": "Processing Lambda Buffer Size"
                },
                "Retention": {
                    "default": "Kinesis Retention"
                },
                "ShardCount": {
                    "default": "Kinesis Shard Count"
                },
                "SubscribeSchedule": {
                    "default": "Look for New Logs Schedule"
                }
            }
        }
    },
    "Outputs": {
        "Bucket": {
            "Description": "Bucket where all logs will be written",
            "Value": {
                "Fn::If": [
                    "CreateBucket",
                    {
                        "Fn::GetAtt": [
                            "LogBucket",
                            "Arn"
                        ]
                    },
                    {
                        "Ref": "BucketName"
                    }
                ]
            }
        },
        "LogDestination": {
            "Description": "Log destination ARN to be used when setting up other accounts to exports logs",
            "Value": {
                "Fn::GetAtt": [
                    "LogDestination",
                    "Arn"
                ]
            }
        }
    },
    "Parameters": {
        "AllowedAccounts": {
            "Default": "0",
            "Description": "Comma separated list of external account numbers allowed to export logs to this bucket (leave as '0' to disallow external accounts)",
            "Type": "List<Number>"
        },
        "BucketName": {
            "Default": "",
            "Description": "ARN of bucket where all logs will be exported (leave empty to automatically create)",
            "Type": "String"
        },
        "BucketPrefix": {
            "Default": "logs/",
            "Description": "Prefix to prepend to all exported file names",
            "Type": "String"
        },
        "BufferIntervalHint": {
            "Default": "300",
            "Description": "Firehose buffering interval hint (in seconds)",
            "Type": "Number"
        },
        "BufferSizeHint": {
            "Default": "50",
            "Description": "Firehose buffering size hint (in megabytes)",
            "Type": "Number"
        },
        "DestinationName": {
            "AllowedPattern": "[a-zA-Z0-9]+",
            "Default": "BucketBackupLogDestination",
            "Description": "Name of log destination (must be unique across this account)",
            "Type": "String"
        },
        "KeyArn": {
            "Default": "",
            "Description": "KMS Key id to encrypt Kinesis stream and S3 bucket at rest (leave empty to disable encryption)",
            "Type": "String"
        },
        "LogFormat": {
            "AllowedValues": [
                "Raw",
                "CloudWatch JSON (GZIP)"
            ],
            "Default": "Raw",
            "Description": "Format in which logs will be saved in the bucket",
            "Type": "String"
        },
        "LogGroupNamePrefix": {
            "Default": "",
            "Description": "Prefix to match against log group that should be exported (leave empty to export all log groups)",
            "Type": "String"
        },
        "ProcessorBufferIntervalHint": {
            "Default": "60",
            "Description": "Processing Lambda buffer timeout (in seconds, only in raw format mode)",
            "MaxValue": 900,
            "MinValue": 60,
            "Type": "Number"
        },
        "ProcessorBufferSizeHint": {
            "Default": "1",
            "Description": "Processing Lambda buffer size (in megabytes, only in raw format mode) -- keep this low as uncompressed buffer data must not exceed Lambda's limit of 6MB response",
            "Type": "Number"
        },
        "Retention": {
            "Default": "24",
            "Description": "Number of hours records remain in Kinesis in case delivery is slow or fails",
            "Type": "Number"
        },
        "ShardCount": {
            "Default": "1",
            "Description": "Number of Kinesis stream shards each capable of 1MB/s or 1000 log records per second",
            "Type": "Number"
        },
        "SubscribeSchedule": {
            "Default": "rate(1 hour)",
            "Description": "Schedule to look for new log groups for export (in case CloudTrail missed something)",
            "Type": "String"
        }
    },
    "Resources": {
        "DeliveryRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "sts:ExternalId": {
                                        "Ref": "AWS::AccountId"
                                    }
                                }
                            },
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "firehose.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:AbortMultipartUpload",
                                        "s3:GetBucketLocation",
                                        "s3:GetObject",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:PutObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::If": [
                                                "CreateBucket",
                                                {
                                                    "Fn::GetAtt": [
                                                        "LogBucket",
                                                        "Arn"
                                                    ]
                                                },
                                                {
                                                    "Ref": "BucketName"
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "/",
                                                [
                                                    {
                                                        "Fn::If": [
                                                            "CreateBucket",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "LogBucket",
                                                                    "Arn"
                                                                ]
                                                            },
                                                            {
                                                                "Ref": "BucketName"
                                                            }
                                                        ]
                                                    },
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "kinesis:DescribeStream",
                                        "kinesis:GetShardIterator",
                                        "kinesis:GetRecords"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "LogStream",
                                            "Arn"
                                        ]
                                    }
                                },
                                {
                                    "Action": [
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/${AWS::StackName}-DeliveryStream*:log-stream:*"
                                        }
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "Encrypt",
                                        {
                                            "Action": [
                                                "kms:Decrypt"
                                            ],
                                            "Condition": {
                                                "StringEquals": {
                                                    "kms:ViaService": {
                                                        "Fn::Sub": "kinesis.${AWS::Region}.amazonaws.com"
                                                    }
                                                }
                                            },
                                            "Effect": "Allow",
                                            "Resource": [
                                                {
                                                    "Ref": "KeyArn"
                                                }
                                            ]
                                        },
                                        {
                                            "Ref": "AWS::NoValue"
                                        }
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "Encrypt",
                                        {
                                            "Action": [
                                                "kms:GenerateDataKey",
                                                "kms:Decrypt"
                                            ],
                                            "Condition": {
                                                "StringEquals": {
                                                    "kms:ViaService": {
                                                        "Fn::Sub": "s3.${AWS::Region}.amazonaws.com"
                                                    }
                                                }
                                            },
                                            "Effect": "Allow",
                                            "Resource": [
                                                {
                                                    "Ref": "KeyArn"
                                                }
                                            ]
                                        },
                                        {
                                            "Ref": "AWS::NoValue"
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "DeliveryPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "DeliveryStream": {
            "Properties": {
                "DeliveryStreamType": "KinesisStreamAsSource",
                "ExtendedS3DestinationConfiguration": {
                    "BucketARN": {
                        "Fn::If": [
                            "CreateBucket",
                            {
                                "Fn::GetAtt": [
                                    "LogBucket",
                                    "Arn"
                                ]
                            },
                            {
                                "Ref": "BucketName"
                            }
                        ]
                    },
                    "BufferingHints": {
                        "IntervalInSeconds": {
                            "Ref": "BufferIntervalHint"
                        },
                        "SizeInMBs": {
                            "Ref": "BufferSizeHint"
                        }
                    },
                    "CloudWatchLoggingOptions": {
                        "Enabled": "true",
                        "LogGroupName": {
                            "Ref": "DeliveryStreamLog"
                        },
                        "LogStreamName": {
                            "Ref": "DeliveryStreamLogStream"
                        }
                    },
                    "CompressionFormat": "UNCOMPRESSED",
                    "EncryptionConfiguration": {
                        "Fn::If": [
                            "Encrypt",
                            {
                                "KMSEncryptionConfig": {
                                    "AWSKMSKeyARN": {
                                        "Ref": "KeyArn"
                                    }
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "Prefix": {
                        "Ref": "BucketPrefix"
                    },
                    "ProcessingConfiguration": {
                        "Fn::If": [
                            "ProcessingRequired",
                            {
                                "Enabled": "true",
                                "Processors": [
                                    {
                                        "Parameters": [
                                            {
                                                "ParameterName": "LambdaArn",
                                                "ParameterValue": {
                                                    "Fn::GetAtt": [
                                                        "LogProcessorFunction",
                                                        "Arn"
                                                    ]
                                                }
                                            },
                                            {
                                                "ParameterName": "BufferSizeInMBs",
                                                "ParameterValue": {
                                                    "Ref": "ProcessorBufferSizeHint"
                                                }
                                            },
                                            {
                                                "ParameterName": "BufferIntervalInSeconds",
                                                "ParameterValue": {
                                                    "Ref": "ProcessorBufferIntervalHint"
                                                }
                                            }
                                        ],
                                        "Type": "Lambda"
                                    }
                                ]
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "RoleARN": {
                        "Fn::GetAtt": [
                            "DeliveryRole",
                            "Arn"
                        ]
                    }
                },
                "KinesisStreamSourceConfiguration": {
                    "KinesisStreamARN": {
                        "Fn::GetAtt": [
                            "LogStream",
                            "Arn"
                        ]
                    },
                    "RoleARN": {
                        "Fn::GetAtt": [
                            "DeliveryRole",
                            "Arn"
                        ]
                    }
                }
            },
            "Type": "AWS::KinesisFirehose::DeliveryStream"
        },
        "DeliveryStreamLog": {
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "/aws/kinesisfirehose/${AWS::StackName}-DeliveryStream"
                }
            },
            "Type": "AWS::Logs::LogGroup"
        },
        "DeliveryStreamLogStream": {
            "Properties": {
                "LogGroupName": {
                    "Ref": "DeliveryStreamLog"
                },
                "LogStreamName": "S3Delivery"
            },
            "Type": "AWS::Logs::LogStream"
        },
        "KinesisRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "logs.ap-northeast-1.amazonaws.com",
                                    "logs.ap-northeast-2.amazonaws.com",
                                    "logs.ap-south-1.amazonaws.com",
                                    "logs.ap-southeast-1.amazonaws.com",
                                    "logs.ap-southeast-2.amazonaws.com",
                                    "logs.ca-central-1.amazonaws.com",
                                    "logs.eu-central-1.amazonaws.com",
                                    "logs.eu-north-1.amazonaws.com",
                                    "logs.eu-west-1.amazonaws.com",
                                    "logs.eu-west-2.amazonaws.com",
                                    "logs.eu-west-3.amazonaws.com",
                                    "logs.sa-east-1.amazonaws.com",
                                    "logs.us-east-1.amazonaws.com",
                                    "logs.us-east-2.amazonaws.com",
                                    "logs.us-west-1.amazonaws.com",
                                    "logs.us-west-2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::IAM::Role"
        },
        "KinesisRoleLambdaPolicy": {
            "Condition": "ProcessingRequired",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:GetFunctionConfiguration"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "LogProcessorFunction",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "KinesisCallProcessor",
                "Roles": [
                    {
                        "Ref": "DeliveryRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "KinesisRolePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "kinesis:PutRecord",
                                "kinesis:PutRecords"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "LogStream",
                                        "Arn"
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "KinesisRole",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Fn::If": [
                                "Encrypt",
                                {
                                    "Action": [
                                        "kms:GenerateDataKey"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Ref": "KeyArn"
                                        }
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "KinesisWrite",
                "Roles": [
                    {
                        "Ref": "KinesisRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "LogBucket": {
            "Condition": "CreateBucket",
            "Type": "AWS::S3::Bucket"
        },
        "LogDestination": {
            "DependsOn": [
                "LogStream",
                "KinesisRole",
                "KinesisRolePolicy"
            ],
            "Properties": {
                "DestinationName": {
                    "Ref": "DestinationName"
                },
                "DestinationPolicy": {
                    "Fn::Sub": [
                        "{\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [\n                {\n                    \"Effect\": \"Allow\",\n                    \"Principal\": {\n                        \"AWS\": [\"${AWS::AccountId}\"]\n                    },\n                    \"Action\": \"logs:PutSubscriptionFilter\",\n                    \"Resource\": \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:destination:${DestinationName}\"\n                }\n                ${Extra}\n            ]\n        }",
                        {
                            "DestinationName": {
                                "Ref": "DestinationName"
                            },
                            "Extra": {
                                "Fn::If": [
                                    "AllowedAccountsSpecified",
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                ",{\n                    \"Effect\": \"Allow\",\n                    \"Principal\": {\"AWS\": [\"",
                                                {
                                                    "Fn::Join": [
                                                        "\",\"",
                                                        {
                                                            "Ref": "AllowedAccounts"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "Fn::Sub": "\"]},\n                    \"Action\": \"logs:PutSubscriptionFilter\",\n                    \"Resource\": \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:destination:${DestinationName}\"\n                    }"
                                                }
                                            ]
                                        ]
                                    },
                                    ""
                                ]
                            }
                        }
                    ]
                },
                "RoleArn": {
                    "Fn::GetAtt": [
                        "KinesisRole",
                        "Arn"
                    ]
                },
                "TargetArn": {
                    "Fn::GetAtt": [
                        "LogStream",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::Logs::Destination"
        },
        "LogProcessorFunction": {
            "Condition": "ProcessingRequired",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Sub": "import base64\nimport gzip\nimport json\n\n\ndef handle_records(records):\n    for record in records:\n        record_id = record[\"recordId\"]\n        data = json.loads(gzip.decompress(base64.b64decode(record[\"data\"])))\n\n        if data[\"messageType\"] == \"CONTROL_MESSAGE\":\n            yield {\n                \"result\": \"Dropped\",\n                \"recordId\": record_id\n            }\n        elif data[\"messageType\"] == \"DATA_MESSAGE\":\n            yield {\n                \"recordId\": record_id,\n                \"result\": \"Ok\",\n                \"data\": base64.b64encode(\"\".join(\n                    f\"{data['logGroup']}:{data['logStream']}\\t{e['timestamp']}\\t{e['message']}\"\n                    for e in data[\"logEvents\"]\n                ).encode(\"utf-8\")).decode(\"utf-8\")\n            }\n        else:\n            yield {\n                \"result\": \"ProcessingFailed\",\n                \"recordId\": record_id\n            }\n\n\ndef handler(event, context):\n    result = []\n    size = 0\n\n    for record in handle_records(event[\"records\"]):\n        size += len(str(record))\n        if size < 6000000:\n            # lambda limits output to 6mb\n            # kinesis will treat records not here as failed and retry\n            # TODO or do we need to reingest?\n            result.append(record)\n        else:\n            break\n\n    return {\"records\": result}\n"
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LogProcessorRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 300
            },
            "Type": "AWS::Lambda::Function"
        },
        "LogProcessorRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": []
            },
            "Type": "AWS::IAM::Role"
        },
        "LogStream": {
            "Properties": {
                "RetentionPeriodHours": {
                    "Ref": "Retention"
                },
                "ShardCount": {
                    "Ref": "ShardCount"
                },
                "StreamEncryption": {
                    "Fn::If": [
                        "Encrypt",
                        {
                            "EncryptionType": "KMS",
                            "KeyId": {
                                "Ref": "KeyArn"
                            }
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "Type": "AWS::Kinesis::Stream"
        },
        "LogSubscriberFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Sub": "import traceback\n\nimport boto3\nimport botocore.exceptions\nimport cfnresponse\n\nlogs_client = boto3.client(\"logs\")\n\n\ndef subscribe(log_group_name):\n    print(\"Subscribe \", log_group_name)\n\n    if log_group_name.startswith(\"/aws/lambda/${AWS::StackName}\") \\\n            or log_group_name.startswith(\"/aws/kinesisfirehose/${AWS::StackName}\"):\n        print(\"Skipping our log groups to avoid endless recursion\")\n        return\n\n    logs_client.put_subscription_filter(\n        logGroupName=log_group_name,\n        filterName=\"BucketBackupFilter\",\n        filterPattern=\"\",\n        destinationArn=\"${LogDestination.Arn}\",\n    )\n\n\ndef matched_log_groups(prefix):\n    print(f\"Finding all log groups with prefix '{prefix}'\")\n\n    log_group_paginator = logs_client.get_paginator(\"describe_log_groups\")\n\n    paginate_params = {}\n    if prefix:\n        paginate_params[\"logGroupNamePrefix\"] = prefix\n\n    for log_group_page in log_group_paginator.paginate(**paginate_params):\n        for log_group in log_group_page[\"logGroups\"]:\n            yield log_group[\"logGroupName\"]\n\n\ndef subscribe_all():\n    for log_group_name in matched_log_groups(\"${LogGroupNamePrefix}\"):\n        subscribe(log_group_name)\n\n\ndef unsubscribe_all():\n    for log_group_name in matched_log_groups(\"\"):\n        print(\"Unsubscribe \", log_group_name)\n\n        try:\n            logs_client.delete_subscription_filter(\n                logGroupName=log_group_name,\n                filterName=\"BucketBackupFilter\",\n            )\n        except botocore.exceptions.ClientError:\n            pass\n\n\ndef handler(event, context):\n    print('event:', event)\n\n    if \"ResponseURL\" in event and \"RequestType\" in event:\n        # custom resource callback\n        try:\n            if event[\"RequestType\"] in [\"Create\", \"Update\"]:\n                print(\"Subscribe to all new log groups on resource\", event[\"RequestType\"])\n                subscribe_all()\n\n            elif event[\"RequestType\"] == \"Delete\":\n                print(\"Unsubscribe all on resource\", event[\"RequestType\"])\n                unsubscribe_all()\n\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, \"ok\")\n\n        except:\n            traceback.print_last()\n            cfnresponse.send(event, context, cfnresponse.FAILED, {}, \"ok\")\n\n    else:\n        # other call\n        detail_type = event.get(\"detail-type\")\n\n        if detail_type == \"AWS API Call via CloudTrail\":\n            print(\"Subscribe to specific new log group from CloudTrail\")\n\n            request_parameters = event['detail']['requestParameters']\n\n            if request_parameters:\n                log_group_name = request_parameters['logGroupName']\n\n                if log_group_name.startswith(\"${LogGroupNamePrefix}\"):\n                    subscribe(log_group_name)\n                else:\n                    print(log_group_name, \"doesn't match required prefix '${LogGroupNamePrefix}'\")\n\n            else:\n                print(\"Bad parameters\")\n\n        elif detail_type == \"Scheduled Event\":\n            print(\"Subscribe to all new log groups on schedule\")\n\n            subscribe_all()\n\n        else:\n            print(\"Subscribe to all new log groups\")\n\n            subscribe_all()\n"
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LogSubscriberRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 300
            },
            "Type": "AWS::Lambda::Function"
        },
        "LogSubscriberPermission": {
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LogSubscriberFunction",
                        "Arn"
                    ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LogSubscriberRule",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "LogSubscriberRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:DeleteSubscriptionFilter",
                                        "logs:DescribeLogGroups",
                                        "logs:PutSubscriptionFilter"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Sid": "Logs"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "Logs"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "LogSubscriberRule": {
            "Properties": {
                "EventPattern": {
                    "detail": {
                        "eventName": [
                            "CreateLogGroup"
                        ],
                        "eventSource": [
                            "logs.amazonaws.com"
                        ]
                    },
                    "detail-type": [
                        "AWS API Call via CloudTrail"
                    ],
                    "source": [
                        "aws.logs"
                    ]
                },
                "ScheduleExpression": {
                    "Ref": "SubscribeSchedule"
                },
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LogSubscriberFunction",
                                "Arn"
                            ]
                        },
                        "Id": "LogSubscriberLambda"
                    }
                ]
            },
            "Type": "AWS::Events::Rule"
        },
        "Subscriber": {
            "DependsOn": [
                "LogSubscriberFunction"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LogSubscriberFunction",
                        "Arn"
                    ]
                }
            },
            "Type": "Custom::Subscriber"
        }
    }
}